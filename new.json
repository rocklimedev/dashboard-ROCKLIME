import { useState, useEffect, useMemo, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import {
  Card,
  Button,
  Modal,
  Spin,
  Alert,
  Typography,
  Divider,
  Row,
  Col,
  Tabs,
  Select,
  Input,
  Form,
} from "antd";
import { ShoppingCartOutlined, CheckCircleOutlined } from "@ant-design/icons";
import { useGetCartQuery, useClearCartMutation } from "../../api/cartApi";
import { useGetProfileQuery } from "../../api/userApi";
import { useGetAllOrdersQuery } from "../../api/orderApi";
import { toast } from "sonner";
import styled from "styled-components";
import PropTypes from "prop-types";
import "react-lazy-load-image-component/src/effects/blur.css";
import OrderTotal from "./OrderTotal";
import AddAddress from "../Address/AddAddressModal";
import moment from "moment";
import { useCreateVendorMutation } from "../../api/vendorApi";
import { useGetAllBrandsQuery } from "../../api/brandsApi";
import CartComponent from "./Cart";
import QuotationForm from "./QuotationForm";
import OrderForm from "./OrderForm";
import PurchaseOrderForm from "./PurchaseOrderForm";

const { Text } = Typography;
const { TabPane } = Tabs;

// AddVendorModal Component
const AddVendorModal = ({ show, onClose, onSave, isCreatingVendor }) => {
  const {
    data: brandsData,
    isLoading: isBrandsLoading,
    error: brandsError,
  } = useGetAllBrandsQuery(undefined, {
    refetchOnMountOrArgChange: true,
  });
  const brands = brandsData || [];
  const [form] = Form.useForm();
  const [vendorData, setVendorData] = useState({
    vendorId: "",
    vendorName: "",
    brandId: "",
    brandSlug: "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setVendorData((prev) => ({ ...prev, [name]: value }));
  };

  const handleBrandChange = (value) => {
    const selectedBrand = brands.find((brand) => brand.id === value);
    setVendorData((prev) => ({
      ...prev,
      brandId: value,
      brandSlug: selectedBrand ? selectedBrand.brandSlug : "",
    }));
    form.setFieldsValue({ brandId: value });
  };

  const handleSubmit = async () => {
    if (!vendorData.vendorId || !vendorData.vendorName) {
      toast.error("Vendor ID and Name are required.");
      return;
    }
    try {
      await onSave({
        vendorId: vendorData.vendorId,
        vendorName: vendorData.vendorName,
        brandId: vendorData.brandId || null,
        brandSlug: vendorData.brandSlug || null,
      }).unwrap();
      setVendorData({
        vendorId: "",
        vendorName: "",
        brandId: "",
        brandSlug: "",
      });
      form.resetFields();
      onClose();
    } catch (err) {
      const errorMessage =
        err.status === 400 && err.data?.message.includes("vendorId")
          ? "Vendor ID already exists. Please use a unique ID."
          : err.data?.message || "Failed to create vendor";
      toast.error(errorMessage);
    }
  };

  return (
    <Modal
      title="Add New Vendor"
      open={show}
      onCancel={onClose}
      footer={null}
      centered
    >
      <Form form={form} onFinish={handleSubmit} layout="vertical">
        {brandsError && (
          <Alert
            message="Failed to load brands"
            description={brandsError?.data?.message || "Unknown error"}
            type="error"
            showIcon
          />
        )}
        <Form.Item
          label="Vendor ID"
          name="vendorId"
          rules={[{ required: true, message: "Please enter a Vendor ID" }]}
        >
          <Input
            name="vendorId"
            value={vendorData.vendorId}
            onChange={handleChange}
            placeholder="e.g., VEND123"
          />
          <div style={{ color: "#8c8c8c", fontSize: "12px" }}>
            Must be unique (e.g., VEND123).
          </div>
        </Form.Item>
        <Form.Item
          label="Vendor Name"
          name="vendorName"
          rules={[{ required: true, message: "Please enter a Vendor Name" }]}
        >
          <Input
            name="vendorName"
            value={vendorData.vendorName}
            onChange={handleChange}
            placeholder="e.g., Acme Supplies"
          />
        </Form.Item>
        <Form.Item label="Brand" name="brandId">
          <Select
            style={{ width: "100%" }}
            value={vendorData.brandId || undefined}
            onChange={handleBrandChange}
            placeholder={
              isBrandsLoading ? "Loading brands..." : "Select a brand"
            }
            loading={isBrandsLoading}
            disabled={isBrandsLoading}
            aria-label="Select a brand"
            options={brands.map((brand) => ({
              value: brand.id,
              label: `${brand.brandName} (${brand.brandSlug})`,
            }))}
          />
        </Form.Item>
        <div style={{ display: "flex", justifyContent: "flex-end" }}>
          <Button
            onClick={onClose}
            disabled={isCreatingVendor}
            style={{ marginRight: "10px" }}
          >
            Cancel
          </Button>
          <Button
            type="primary"
            htmlType="submit"
            disabled={isCreatingVendor || isBrandsLoading}
          >
            {isCreatingVendor ? <Spin size="small" /> : "Save Vendor"}
          </Button>
        </div>
      </Form>
    </Modal>
  );
};

// Styled Components
const PageWrapper = styled.div`
  padding: 16px;
  background-color: #f5f5f5;
  min-height: 100vh;
  @media (min-width: 768px) {
    padding: 24px;
  }
`;

const CartContainer = styled.div`
  max-width: 1200px;
  margin: 0 auto;
  padding: 12px;
  @media (min-width: 768px) {
    padding: 20px;
  }
`;

const CartSummaryCard = styled(Card)`
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  position: sticky;
  top: 16px;
  @media (min-width: 768px) {
    top: 20px;
  }
`;

const CheckoutButton = styled(Button)`
  background: #e31e24;
  border-color: #e31e24;
  &:hover {
    background: #e31e24;
    border-color: #e31e24;
  }
`;

// Utility Functions
const generateQuotationNumber = () => {
  const timestamp = Date.now().toString().slice(-6);
  const random = Math.floor(1000 + Math.random() * 9000);
  return `QUO-${timestamp}-${random}`;
};

const generateOrderNumber = (orders) => {
  const today = moment().format("DMMYY"); // e.g., "111025" for October 11, 2025
  const todayOrders = orders.filter((order) =>
    moment(order.createdAt).isSame(moment(), "day")
  );
  const serialNumber = todayOrders.length + 101; // Start from 101
  return `${today}${serialNumber}`;
};

const generatePurchaseOrderNumber = (orders) => {
  const today = moment().format("DDMMYYYY");
  const todayOrders = orders.filter((order) =>
    moment(order.createdAt).isSame(moment(), "day")
  );
  const serialNumber = String(todayOrders.length + 1).padStart(5, "0");
  return `PO-${today}-${serialNumber}`;
};

// NewCart Component
const NewCart = ({ onConvertToOrder }) => {
  const navigate = useNavigate();
  const {
    data: profileData,
    isLoading: profileLoading,
    error: profileError,
  } = useGetProfileQuery();
  const userId = profileData?.user?.userId;

  // State declarations
  const [activeTab, setActiveTab] = useState("cart");
  const [selectedCustomer, setSelectedCustomer] = useState("");
  const [selectedVendor, setSelectedVendor] = useState("");
  const [showClearCartModal, setShowClearCartModal] = useState(false);
  const [showAddAddressModal, setShowAddAddressModal] = useState(false);
  const [showAddVendorModal, setShowAddVendorModal] = useState(false);
  const [documentType, setDocumentType] = useState("Quotation");
  const [quotationNumber, setQuotationNumber] = useState(
    generateQuotationNumber()
  );
  const [orderNumber, setOrderNumber] = useState("");
  const [purchaseOrderNumber, setPurchaseOrderNumber] = useState("");
  const [createVendor, { isLoading: isCreatingVendor }] =
    useCreateVendorMutation();
  const [quotationData, setQuotationData] = useState({
    quotationDate: new Date().toISOString().split("T")[0],
    dueDate: "",
    billTo: "",
    shipTo: null,
    signatureName: "CM TRADING CO",
    includeGst: false,
    gstValue: "",
    discountType: "percent",
    roundOff: "",
  });
  const [orderData, setOrderData] = useState({
    createdFor: "",
    createdBy: userId || "",
    assignedTo: "",
    pipeline: "",
    status: "CREATED",
    dueDate: "",
    followupDates: [],
    source: "",
    teamId: "",
    priority: "medium",
    description: "",
    invoiceLink: null,
    orderNo: "", // Will be set to orderNumber
    quotationId: "",
  });
  const [purchaseOrderData, setPurchaseOrderData] = useState({
    vendorId: "",
    orderDate: moment().format("YYYY-MM-DD"),
    expectedDeliveryDate: null,
    items: [],
    totalAmount: 0,
    status: "pending",
  });
  const [itemDiscounts, setItemDiscounts] = useState({});
  const [error, setError] = useState("");
  const [updatingItems, setUpdatingItems] = useState({});
  const [productSearch, setProductSearch] = useState("");
  const [filteredProducts, setFilteredProducts] = useState([]);

  // Queries
  const {
    data: cartData,
    isLoading: cartLoading,
    isError: cartError,
    refetch,
  } = useGetCartQuery(userId, { skip: !userId });
  const { data: allOrdersData } = useGetAllOrdersQuery();
  const [clearCart] = useClearCartMutation();

  // Memoized data
  const cartItems = useMemo(
    () => (Array.isArray(cartData?.cart?.items) ? cartData.cart.items : []),
    [cartData]
  );
  const orders = useMemo(
    () => (Array.isArray(allOrdersData?.orders) ? allOrdersData.orders : []),
    [allOrdersData]
  );

  // Set orderNumber and update orderData.orderNo
  useEffect(() => {
    if (!orderNumber && allOrdersData !== undefined) {
      const newOrderNumber = generateOrderNumber(orders);
      setOrderNumber(newOrderNumber);
      setOrderData((prev) => ({ ...prev, orderNo: newOrderNumber }));
    }
  }, [allOrdersData, orders, orderNumber, setOrderData]);

  useEffect(() => {
    if (!purchaseOrderNumber && allOrdersData !== undefined) {
      setPurchaseOrderNumber(generatePurchaseOrderNumber(orders));
    }
  }, [allOrdersData, orders, purchaseOrderNumber]);

  // Handlers
  const handleClearCart = async () => {
    if (!userId) return toast.error("User not logged in!");
    try {
      await clearCart({ userId }).unwrap();
      setQuotationNumber(generateQuotationNumber());
      setPurchaseOrderNumber(generatePurchaseOrderNumber(orders));
      setItemDiscounts({});
      setPurchaseOrderData((prev) => ({ ...prev, items: [] }));
      refetch();
      setShowClearCartModal(false);
      setActiveTab("cart");
    } catch (error) {
      toast.error(`Error: ${error.data?.message || "Failed to clear cart"}`);
    }
  };

  const handleDocumentTypeChange = (value) => {
    console.log("Selected document type:", value); // Debugging
    setDocumentType(value);
    resetForm();
  };

  const resetForm = () => {
    const newOrderNumber = generateOrderNumber(orders);
    setQuotationData({
      quotationDate: new Date().toISOString().split("T")[0],
      dueDate: "",
      billTo: "",
      shipTo: null,
      signatureName: "CM TRADING CO",
      includeGst: false,
      gstValue: "",
      discountType: "percent",
      roundOff: "",
    });
    setOrderData({
      createdFor: "",
      createdBy: userId || "",
      assignedTo: "",
      pipeline: "",
      status: "CREATED",
      dueDate: "",
      followupDates: [],
      source: "",
      teamId: "",
      priority: "medium",
      description: "",
      invoiceLink: null,
      orderNo: newOrderNumber, // Set new order number
      quotationId: "",
    });
    setPurchaseOrderData({
      vendorId: "",
      orderDate: moment().format("YYYY-MM-DD"),
      expectedDeliveryDate: null,
      items: [],
      totalAmount: 0,
      status: "pending",
    });
    setSelectedCustomer("");
    setSelectedVendor("");
    setItemDiscounts({});
    setQuotationNumber(generateQuotationNumber());
    setOrderNumber(newOrderNumber);
    setPurchaseOrderNumber(generatePurchaseOrderNumber(orders));
    setActiveTab("cart");
    setProductSearch("");
    setFilteredProducts([]);
  };

  const validateFollowupDates = () => {
    if (!orderData.dueDate || orderData.followupDates.length === 0) return true;
    const dueDate = moment(orderData.dueDate);
    return orderData.followupDates.every((followupDate) => {
      if (!followupDate || new Date(followupDate).toString() === "Invalid Date")
        return true;
      return moment(followupDate).isSameOrBefore(dueDate, "day");
    });
  };

  // Total calculations
  const totalItems = useMemo(
    () => cartItems.reduce((acc, item) => acc + (item.quantity || 0), 0),
    [cartItems]
  );
  const subTotal = useMemo(
    () =>
      cartItems.reduce(
        (acc, item) => acc + (item.price || 0) * (item.quantity || 0),
        0
      ),
    [cartItems]
  );
  const totalDiscount = useMemo(
    () =>
      cartItems.reduce((acc, item) => {
        const discount = parseFloat(itemDiscounts[item.productId]) || 0;
        const quantity = item.quantity || 1;
        const price = item.price || 0;
        if (quotationData.discountType === "percent") {
          return acc + (price * quantity * discount) / 100;
        }
        return acc + discount * quantity;
      }, 0),
    [cartItems, itemDiscounts, quotationData.discountType]
  );
  const shipping = 40;
  const tax = quotationData.includeGst
    ? (subTotal * (parseFloat(quotationData.gstValue) || 0)) / 100
    : 25;
  const roundOff = parseFloat(quotationData.roundOff) || 0;
  const totalAmount = subTotal + shipping + tax - totalDiscount + roundOff;

  if (profileLoading || cartLoading) {
    return (
      <PageWrapper>
        <Spin size="large" style={{ display: "block", margin: "50px auto" }} />
      </PageWrapper>
    );
  }

  if (profileError || cartError) {
    return (
      <PageWrapper>
        <Alert
          message="Error loading data"
          description={
            profileError?.message ||
            cartError?.message ||
            "An unexpected error occurred"
          }
          type="error"
          action={
            <Button type="primary" onClick={refetch}>
              Retry
            </Button>
          }
          showIcon
        />
      </PageWrapper>
    );
  }

  return (
    <div className="page-wrapper">
      <PageWrapper>
        <CartContainer>
          <div style={{ marginBottom: 16 }}>
            <Select
              value={documentType}
              onChange={handleDocumentTypeChange}
              style={{ width: 200 }}
              aria-label="Select document type"
              options={[
                { value: "Quotation", label: "Quotation" },
                { value: "Order", label: "Order" },
                { value: "Purchase Order", label: "Purchase Order" },
              ]}
            />
          </div>
          <Tabs
            activeKey={activeTab}
            onChange={setActiveTab}
            type="card"
            style={{ marginBottom: 16 }}
            role="tablist"
          >
            <TabPane
              tab={
                <span
                  role="tab"
                  aria-label={`Cart tab with ${totalItems} items`}
                >
                  <ShoppingCartOutlined /> Cart ({totalItems})
                </span>
              }
              key="cart"
            >
              <CartComponent
                cartItems={cartItems}
                userId={userId}
                itemDiscounts={itemDiscounts}
                setItemDiscounts={setItemDiscounts}
                updatingItems={updatingItems}
                setUpdatingItems={setUpdatingItems}
                refetch={refetch}
                quotationData={quotationData}
                totalItems={totalItems}
                subTotal={subTotal}
                totalDiscount={totalDiscount}
                shipping={shipping}
                tax={tax}
                roundOff={roundOff}
                setActiveTab={setActiveTab}
                setShowClearCartModal={setShowClearCartModal}
              />
            </TabPane>
            <TabPane
              tab={
                <span role="tab" aria-label="Checkout tab">
                  <CheckCircleOutlined /> Checkout
                </span>
              }
              key="checkout"
            >
              <Row gutter={[16, 16]} justify="center">
                <Col xs={24} sm={24} md={16} lg={16}>
                  {documentType === "Quotation" ? (
                    <QuotationForm
                      selectedCustomer={selectedCustomer}
                      setSelectedCustomer={setSelectedCustomer}
                      quotationData={quotationData}
                      setQuotationData={setQuotationData}
                      itemDiscounts={itemDiscounts}
                      cartItems={cartItems}
                      userId={userId}
                      quotationNumber={quotationNumber}
                      totalAmount={totalAmount}
                      setError={setError}
                      error={error}
                      setShowAddAddressModal={setShowAddAddressModal}
                      resetForm={resetForm}
                      setActiveTab={setActiveTab}
                    />
                  ) : documentType === "Order" ? (
                    <OrderForm
                      selectedCustomer={selectedCustomer}
                      setSelectedCustomer={setSelectedCustomer}
                      quotationData={quotationData}
                      setQuotationData={setQuotationData}
                      orderData={orderData}
                      setOrderData={setOrderData}
                      itemDiscounts={itemDiscounts}
                      cartItems={cartItems}
                      userId={userId}
                      orderNumber={orderNumber}
                      totalAmount={totalAmount}
                      setError={setError}
                      error={error}
                      setShowAddAddressModal={setShowAddAddressModal}
                      resetForm={resetForm}
                      setActiveTab={setActiveTab}
                    />
                  ) : (
                    <PurchaseOrderForm
                      selectedVendor={selectedVendor}
                      setSelectedVendor={setSelectedVendor}
                      purchaseOrderData={purchaseOrderData}
                      setPurchaseOrderData={setPurchaseOrderData}
                      productSearch={productSearch}
                      setProductSearch={setProductSearch}
                      filteredProducts={filteredProducts}
                      setFilteredProducts={setFilteredProducts}
                      purchaseOrderNumber={purchaseOrderNumber}
                      cartItems={cartItems}
                      resetForm={resetForm}
                      setShowAddVendorModal={setShowAddVendorModal}
                      setActiveTab={setActiveTab}
                    />
                  )}
                </Col>
                <Col xs={24} sm={24} md={8} lg={8}>
                  <CartSummaryCard>
                    <Text strong>
                      {documentType} #:{" "}
                      {documentType === "Quotation"
                        ? quotationNumber
                        : documentType === "Order"
                        ? orderData.orderNo
                        : purchaseOrderNumber}
                    </Text>
                    <Divider />
                    {documentType === "Purchase Order" ? (
                      <>
                        <Text strong>Total Amount (₹)</Text>
                        <p>{purchaseOrderData.totalAmount}</p>
                      </>
                    ) : (
                      <OrderTotal
                        shipping={shipping}
                        tax={tax}
                        coupon={0}
                        discount={totalDiscount}
                        roundOff={roundOff}
                        subTotal={subTotal}
                      />
                    )}
                    <Divider />
                    <CheckoutButton
                      type="primary"
                      icon={<CheckCircleOutlined />}
                      onClick={() => {
                        if (documentType === "Quotation") {
                          document.querySelector("#quotation-submit").click();
                        } else if (documentType === "Order") {
                          document.querySelector("#order-submit").click();
                        } else {
                          document.querySelector("#po-submit").click();
                        }
                      }}
                      disabled={
                        (documentType !== "Purchase Order" &&
                          (cartItems.length === 0 ||
                            !selectedCustomer ||
                            error ||
                            !quotationData.quotationDate ||
                            !quotationData.dueDate ||
                            (documentType === "Order" &&
                              (!orderData.orderNo ||
                                !orderData.teamId ||
                                !validateFollowupDates())))) ||
                        (documentType === "Purchase Order" &&
                          (purchaseOrderData.items.length === 0 ||
                            !selectedVendor))
                      }
                      block
                      size="large"
                      aria-label={`Create ${documentType.toLowerCase()}`}
                    >
                      Create {documentType}
                    </CheckoutButton>
                    <Button
                      type="default"
                      onClick={() => setActiveTab("cart")}
                      block
                      style={{ marginTop: 8 }}
                      aria-label="Back to cart"
                    >
                      Back to Cart
                    </Button>
                  </CartSummaryCard>
                </Col>
              </Row>
            </TabPane>
          </Tabs>

          <Modal
            title="Confirm Clear Cart"
            open={showClearCartModal}
            onOk={handleClearCart}
            onCancel={() => setShowClearCartModal(false)}
            okText="Clear"
            okButtonProps={{ danger: true }}
            cancelText="Cancel"
            width={window.innerWidth < 576 ? "90%" : 520}
          >
            <Text>
              Are you sure you want to clear all items from your cart?
            </Text>
          </Modal>

          {showAddAddressModal && (
            <AddAddress
              onClose={() => setShowAddAddressModal(false)}
              onSave={(newAddressId) =>
                setQuotationData((prev) => ({ ...prev, shipTo: newAddressId }))
              }
              selectedCustomer={selectedCustomer}
            />
          )}

          <AddVendorModal
            show={showAddVendorModal}
            onClose={() => setShowAddVendorModal(false)}
            onSave={createVendor}
            isCreatingVendor={isCreatingVendor}
          />
        </CartContainer>
      </PageWrapper>
    </div>
  );
};

NewCart.propTypes = {
  onConvertToOrder: PropTypes.func,
};

NewCart.defaultProps = {
  onConvertToOrder: (orderData) => {
    console.warn("onConvertToOrder not provided. Order data:", orderData);
  },
};

export default NewCart;
